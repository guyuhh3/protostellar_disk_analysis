"""
   inputs_gizmo_carver.py

   Purpose:
        Input file for RadMC carving routines. This is the only file you should
        edit. Follow the comments below to see what each variable represents.

   Author:
        Sean Feng, feng.sean01@utexas.edu
        Spring 2022
        
        Modified from:
        inputs_CarveOut.py, written by
        Aaron T. Lee, aaron.t.lee@utexas.edu
        Spring 2018

   Written/Tested with Python 3.9, yt 4.0.2
"""

from yt.units import * 
import h5py
import os
import numpy as np
import functions as f


# Constants for calculating derived fields
dust_to_gas = 0.01
hydrogen_ratio = 2.33
microturbulence_speed = 1000 # cgs
gamma = 5.0/3.0 # Note gamma is not constant and this function is an approximation.
helium_mass_fraction = 0.24 # Default mass fraction in Gizmo

# number fraction of target species
molecular_abundance = 10**-7 # abundance of NH3


# Center of mass from sink ids
def compute_box_center_from_sink_ids(snapnum, snapdir, sink_ids):
    fname = os.path.join(snapdir, f"snapshot_{int(snapnum):03d}.hdf5")
    with h5py.File(fname, 'r') as f:
        p5 = f['PartType5']
        ids = p5['ParticleIDs'][()]
        coords = p5['Coordinates'][()]
        masses = p5['Masses'][()]
        idx = np.isin(ids, sink_ids)
        m = masses[idx]
        x = coords[idx, 0]
        y = coords[idx, 1]
        z = coords[idx, 2]
        cm_x = np.sum(m * x) / np.sum(m)
        cm_y = np.sum(m * y) / np.sum(m)
        cm_z = np.sum(m * z) / np.sum(m)
    return [cm_x, cm_y, cm_z]

# Units of the above box values ('pc','cm','AU','ly' accepted)
box_units = 'AU'

# Routine will generate input files for a square area centered at box_center 
# extending to box_center += box_size on each side
# Use same units as box_units
box_size = 150 # AU

# Resolution of the resulting image (give as a complex number, e.g. for 
# box_dim = 64j, the resulting image will be 64x64)
box_dim = 800j

# Snapshot number EDIT THIS
snap = "325"
i = 325
# Name tag for output file directory
tag = "sn" + snap + "_" + str(int(np.imag(box_dim))) + "_"

# Filepath of the HDF5 file name to read in
# If the HDF5 file is located in the same directory as the script files,
# you can just put the file name
# hdf5_dir = "/scratch3/03532/mgrudic/STARFORGE_RT/production/M2e4_R10_S0_T1_B0.01_Res271_n2_sol0.5_42/output/"

# Data directory containing snapshot files.
snapdir = r"/workspace/budamgunta/snapshots/all_snapshots" 

# Function to get snapshot filename. --> adjust function if necessary based on standard file names
def get_fname_snap(i, snapdir, verbose=True):
    fname = os.path.join(snapdir, 'snapshot_{0:03d}.hdf5'.format(i))
    if verbose:
        print('filename: {0:s}'.format(fname))
    return fname

hdf5_file = get_fname_snap(i, snapdir, verbose=False)

# Load center sink particle IDs from snapshot
import functions as f
snapshot_data = f.load_snapshot_data(i, snapdir, verbose=False)
center_sink_ids = snapshot_data['stars']['ids']

# x, y, z coordinates for the center of the carved domain (e.g., location of a star core)
# The values should match the unit given by box_units
box_center_cm = compute_box_center_from_sink_ids(int(snap), snapdir, center_sink_ids)
cm_to_au = 1.496e+13 # or use l_unit from the snapshot header
box_center = [x / cm_to_au for x in box_center_cm] # in au

# unit base to use for calculations
unit_base = {
    "UnitMagneticField_in_gauss": 1e4,
    "UnitLength_in_cm": 3.08568e18,
    "UnitMass_in_g": 1.989e33,
    "UnitVelocity_in_cm_per_s": 100,
}

# Filepath for directory containing input files that are not generated by the carver routine.
# These files are still necessary for running RADMC-3D. The files are:
# camera_wavelength_micron.inp
# dustkappa_silicate.inp
# dustopac.inp
# lines.inp
# molecule_nh3.inp (Or data file for other target species)
# radmc3d.inp
# wavelength_micron.inp
existing_filepath = '/workspace/budamgunta/anaconda3/radmc3d-2.0-master/python/gizmo_carver-main/default_files'

# Filepath for storing output files. Routine will make a working directory within this
# output directory for each run.
output_filepath = '/workspace/budamgunta/snapshots/all_snapshots/output_files/nonideal_OA'

# M2e3_R3_S0_T1_B0.01_Res126_n2_sol0.5_42/'
# /M2e4_fid_output_files/'#'./output_files' #Used for M2e3 tests

# Write a new line file rather than use defaults file
write_line_file = True
# velocity max/min for the wavelength file
vmax = 10  # km/s
# number of wavelengths in output file
nwav = 256
# Line rest frequency, see molecule_x.inp file
restfreq = 230.538e9  # 12CO (1-0): 115.2712018E9, (2-1) 230.5380000E9
# restfreq = 23.69449550E9 # NH3[1,1]


# Output file names for use in RADMC3D
out_afname = "amr_grid.inp"       # output file name for amr grid
out_nfname = "numberdens_nh3.inp" # output file name for target species above
out_vfname = "gas_velocity.inp"   # output file name for velocity
out_tfname = "gas_temperature.inp"    # output file name for temperature
out_ddfname = "dust_density.inp" # output file name for dust density
out_dtfname = "dust_temperature.dat" # output for dust temperature (requires .dat)
out_mtfname = "microturbulence.inp" # output for microturbulence

# Names of existing files
out_molname = 'molecule_nh3.inp' # (Or data file for other target species)
out_wlmname = 'wavelength_micron.inp'
out_cwlname = 'camera_wavelength_micron.inp'
out_dksname = 'dustkappa_silicate.inp'
out_dtpname = 'dustopac.inp'
out_linname = 'lines.inp'
out_rmcname = 'radmc3d.inp'
